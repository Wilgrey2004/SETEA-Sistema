<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Controls.ItemsRepeater</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Controls.ElementFactoryGetArgs">
            <summary>
            Represents the optional arguments to use when calling an implementation of the
            <see cref="T:Avalonia.Controls.IElementFactory"/>'s <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ElementFactoryGetArgs.Data">
            <summary>
            Gets or sets the data item for which an appropriate element tree should be realized
            when calling <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ElementFactoryGetArgs.Parent">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.Control"/> that is expected to be the parent of the
            realized element from <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ElementFactoryGetArgs.Index">
            <summary>
            Gets or sets the index of the item that should be realized.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ElementFactoryRecycleArgs">
            <summary>
            Represents the optional arguments to use when calling an implementation of the
            <see cref="T:Avalonia.Controls.IElementFactory"/>'s <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/> method.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ElementFactoryRecycleArgs.Element">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.Control"/> to recycle when calling 
            <see cref="M:Avalonia.Controls.IElementFactory.RecycleElement(Avalonia.Controls.ElementFactoryRecycleArgs)"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ElementFactoryRecycleArgs.Parent">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Controls.Control"/> that is expected to be the parent of the
            realized element from <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IElementFactory">
            <summary>
            A data template that supports creating and recycling elements for an <see cref="T:Avalonia.Controls.ItemsRepeater"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)">
            <summary>
            Gets an <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
            <param name="args">The element args.</param>
        </member>
        <member name="M:Avalonia.Controls.IElementFactory.RecycleElement(Avalonia.Controls.ElementFactoryRecycleArgs)">
            <summary>
            Recycles an <see cref="T:Avalonia.Controls.Control"/> that was previously retrieved using
            <see cref="M:Avalonia.Controls.IElementFactory.GetElement(Avalonia.Controls.ElementFactoryGetArgs)"/>.
            </summary>
            <param name="args">The recycle args.</param>
        </member>
        <member name="T:Avalonia.Controls.ItemsRepeater">
            <summary>
            Represents a data-driven collection control that incorporates a flexible layout system,
            custom views, and virtualization.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsRepeater.HorizontalCacheLengthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsRepeater.HorizontalCacheLength"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsRepeater.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsRepeater.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsRepeater.ItemsSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsRepeater.ItemsSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsRepeater.LayoutProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsRepeater.Layout"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsRepeater.VerticalCacheLengthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsRepeater.VerticalCacheLength"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ItemsRepeater"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.Layout">
            <summary>
            Gets or sets the layout used to size and position elements in the ItemsRepeater.
            </summary>
            <value>
            The layout used to size and position elements. The default is a StackLayout with
            vertical orientation.
            </value>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.ItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the ItemsRepeater.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.ItemTemplate">
            <summary>
            Gets or sets the template used to display each item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.HorizontalCacheLength">
            <summary>
            Gets or sets a value that indicates the size of the buffer used to realize items when
            panning or scrolling horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.VerticalCacheLength">
            <summary>
            Gets or sets a value that indicates the size of the buffer used to realize items when
            panning or scrolling vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeater.ItemsSourceView">
            <summary>
            Gets a standardized view of the supported interactions between a given Items object and
            the ItemsRepeater control and its associated components.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ItemsRepeater.ElementClearing">
            <summary>
            Occurs each time an element is cleared and made available to be re-used.
            </summary>
            <remarks>
            This event is raised immediately each time an element is cleared, such as when it falls
            outside the range of realized items. Elements are cleared when they become available
            for re-use.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.ItemsRepeater.ElementIndexChanged">
             <summary>
             Occurs for each realized <see cref="T:Avalonia.Controls.Control"/> when the index for the item it
             represents has changed.
             </summary>
             <remarks>
             When you use ItemsRepeater to build a more complex control that supports specific
             interactions on the child elements (such as selection or click), it is useful to be
             able to keep an up-to-date identifier for the backing data item.
            
             This event is raised for each realized Control where the index for the item it
             represents has changed. For example, when another item is added or removed in the data
             source, the index for items that come after in the ordering will be impacted.
             </remarks>
        </member>
        <member name="E:Avalonia.Controls.ItemsRepeater.ElementPrepared">
            <summary>
            Occurs each time an element is prepared for use.
            </summary>
            <remarks>
            The prepared element might be newly created or an existing element that is being re-
            used.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.GetElementIndex(Avalonia.Controls.Control)">
            <summary>
            Retrieves the index of the item from the data source that corresponds to the specified
            <see cref="T:Avalonia.Controls.Control"/>.
            </summary>
            <param name="element">
            The element that corresponds to the item to get the index of.
            </param>
            <returns>
            The index of the item from the data source that corresponds to the specified UIElement,
            or -1 if the element is not supported.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.TryGetElement(System.Int32)">
            <summary>
            Retrieves the realized UIElement that corresponds to the item at the specified index in
            the data source.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>
            he UIElement that corresponds to the item at the specified index if the item is
            realized, or null if the item is not realized.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.GetOrCreateElement(System.Int32)">
            <summary>
            Retrieves the UIElement that corresponds to the item at the specified index in the
            data source.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>
            An <see cref="T:Avalonia.Controls.Control"/> that corresponds to the item at the specified index. If the
            item is not realized, a new UIElement is created.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.MeasureOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.ArrangeOverride(Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.ItemsRepeater.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.ItemsRepeaterElementClearingEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsRepeater.ElementClearing"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementClearingEventArgs.Element">
            <summary>
            Gets the element that is being cleared for re-use.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsRepeater.ElementIndexChanged"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs.Element">
            <summary>
            Get the element for which the index changed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs.NewIndex">
            <summary>
            Gets the index of the element after the change.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs.OldIndex">
            <summary>
            Gets the index of the element before the change.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.ItemsRepeater.ElementPrepared"/> event.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs.Element">
            <summary>
            Gets the prepared element.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs.Index">
            <summary>
            Gets the index of the item the element was prepared for.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.AttachedLayout">
            <summary>
            Represents the base class for an object that sizes and arranges child elements for a host.
            </summary>
        </member>
        <member name="E:Avalonia.Layout.AttachedLayout.MeasureInvalidated">
            <summary>
            Occurs when the measurement state (layout) has been invalidated.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.AttachedLayout.MeasureInvalidatedWeakEvent">
            <summary>
            Occurs when the measurement state (layout) has been invalidated.
            </summary>
        </member>
        <member name="E:Avalonia.Layout.AttachedLayout.ArrangeInvalidated">
            <summary>
            Occurs when the arrange state (layout) has been invalidated.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.AttachedLayout.ArrangeInvalidatedWeakEvent">
            <summary>
            Occurs when the arrange state (layout) has been invalidated.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.InitializeForContext(Avalonia.Layout.LayoutContext)">
             <summary>
             Initializes any per-container state the layout requires when it is attached to an
             <see cref="T:Avalonia.Layout.Layoutable"/> container.
             </summary>
             <param name="context">
             The context object that facilitates communication between the layout and its host
             container.
             </param>
             <remarks>
             Container elements that support attached layouts should call this method when a layout
             instance is first assigned. The container is expected to give the attached layout
             instance a way to store and retrieve any per-container state by way of the provided
             context. It is also the responsibility of the container to not reuse the context, or
             otherwise expose the state from one layout to another.
            
             When an attached layout is removed the container should release any reference to the
             layout state it stored.
             
             Override <see cref="M:Avalonia.Layout.NonVirtualizingLayout.InitializeForContextCore(Avalonia.Layout.LayoutContext)"/> or
             <see cref="M:Avalonia.Layout.VirtualizingLayout.InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext)"/> to provide the behavior for
             this method in a derived class.
             </remarks>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.UninitializeForContext(Avalonia.Layout.LayoutContext)">
            <summary>
            Removes any state the layout previously stored on the ILayoutable container.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.Measure(Avalonia.Layout.LayoutContext,Avalonia.Size)">
            <summary>
            Suggests a DesiredSize for a container element. A container element that supports
            attached layouts should call this method from their own MeasureOverride implementations
            to form a recursive layout update. The attached layout is expected to call the Measure
            for each of the container’s ILayoutable children.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="availableSize">
            The available space that a container can allocate to a child object. A child object can
            request a larger space than what is available; the provided size might be accommodated
            if scrolling or other resize behavior is possible in that particular container.
            </param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.Arrange(Avalonia.Layout.LayoutContext,Avalonia.Size)">
            <summary>
            Positions child elements and determines a size for a container UIElement. Container
            elements that support attached layouts should call this method from their layout
            override implementations to form a recursive layout update.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="finalSize">
            The final size that the container computes for the child in layout.
            </param>
            <returns>The actual size that is used after the element is arranged in layout.</returns>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.InvalidateMeasure">
            <summary>
            Invalidates the measurement state (layout) for all ILayoutable containers that reference
            this layout.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.AttachedLayout.InvalidateArrange">
            <summary>
            Invalidates the arrange state (layout) for all UIElement containers that reference this
            layout. After the invalidation, the UIElement will have its layout updated, which
            occurs asynchronously.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.LayoutContext">
            <summary>
            Represents the base class for an object that facilitates communication between an attached
            layout and its host container.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.LayoutContext.LayoutState">
            <summary>
            Gets or sets an object that represents the state of a layout.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.LayoutContext.LayoutStateCore">
            <summary>
            Implements the behavior of <see cref="P:Avalonia.Layout.LayoutContext.LayoutState"/> in a derived or custom LayoutContext.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.NonVirtualizingLayout">
            <summary>
            Represents the base class for an object that sizes and arranges child elements for a host
            and and does not support virtualization.
            </summary>
            <remarks>
            NonVirtualizingLayout is the base class for layouts that do not support virtualization. You
            can inherit from it to create your own layout.
            
            A non-virtualizing layout can measure and arrange child elements.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.NonVirtualizingLayout.InitializeForContextCore(Avalonia.Layout.LayoutContext)">
            <summary>
            When overridden in a derived class, initializes any per-container state the layout
            requires when it is attached to an ILayoutable container.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
        </member>
        <member name="M:Avalonia.Layout.NonVirtualizingLayout.UninitializeForContextCore(Avalonia.Layout.LayoutContext)">
            <summary>
            When overridden in a derived class, removes any state the layout previously stored on
            the ILayoutable container.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
        </member>
        <member name="M:Avalonia.Layout.NonVirtualizingLayout.MeasureOverride(Avalonia.Layout.NonVirtualizingLayoutContext,Avalonia.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of the layout cycle. Classes can override
            this method to define their own "Measure" pass behavior.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="availableSize">
            The available size that this object can give to child objects. Infinity can be
            specified as a value to indicate that the object will size to whatever content is
            available.
            </param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations
            of the allocated sizes for child objects or based on other considerations such as a
            fixed container size.
            </returns>
        </member>
        <member name="M:Avalonia.Layout.NonVirtualizingLayout.ArrangeOverride(Avalonia.Layout.NonVirtualizingLayoutContext,Avalonia.Size)">
            <summary>
            When implemented in a derived class, provides the behavior for the "Arrange" pass of
            layout. Classes can override this method to define their own "Arrange" pass behavior.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="finalSize">
            The final area within the container that this object should use to arrange itself and
            its children.
            </param>
            <returns>The actual size that is used after the element is arranged in layout.</returns>
        </member>
        <member name="T:Avalonia.Layout.NonVirtualizingLayoutContext">
            <summary>
            Represents the base class for layout context types that do not support virtualization.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.NonVirtualizingLayoutContext.Children">
            <summary>
            Gets the collection of child controls from the container that provides the context.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.NonVirtualizingLayoutContext.ChildrenCore">
            <summary>
            Implements the behavior for getting the return value of <see cref="P:Avalonia.Layout.NonVirtualizingLayoutContext.Children"/> in a
            derived or custom <see cref="T:Avalonia.Layout.NonVirtualizingLayoutContext"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.NonVirtualizingStackLayout.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.NonVirtualizingStackLayout.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.NonVirtualizingStackLayout.SpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.NonVirtualizingStackLayout.Spacing"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.NonVirtualizingStackLayout.Orientation">
            <summary>
            Gets or sets the axis along which items are laid out.
            </summary>
            <value>
            One of the enumeration values that specifies the axis along which items are laid out.
            The default is Vertical.
            </value>
        </member>
        <member name="P:Avalonia.Layout.NonVirtualizingStackLayout.Spacing">
            <summary>
            Gets or sets a uniform distance (in pixels) between stacked items. It is applied in the
            direction of the StackLayout's Orientation.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.StackLayout">
            <summary>
            Arranges elements into a single line (with spacing) that can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.StackLayout.DisableVirtualizationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.StackLayout.DisableVirtualization"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.StackLayout.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.StackLayout.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.StackLayout.SpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.StackLayout.Spacing"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.StackLayout.#ctor">
            <summary>
            Initializes a new instance of the StackLayout class.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.StackLayout.DisableVirtualization">
            <summary>
            Gets or sets a value indicating whether virtualization is disabled on the layout.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.StackLayout.Orientation">
            <summary>
            Gets or sets the axis along which items are laid out.
            </summary>
            <value>
            One of the enumeration values that specifies the axis along which items are laid out.
            The default is Vertical.
            </value>
        </member>
        <member name="P:Avalonia.Layout.StackLayout.Spacing">
            <summary>
            Gets or sets a uniform distance (in pixels) between stacked items. It is applied in the
            direction of the StackLayout's Orientation.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.StackLayoutState">
            <summary>
            Represents the state of a StackLayout.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.UniformGridLayoutItemsJustification">
            <summary>
            Defines constants that specify how items are aligned on the non-scrolling or non-virtualizing axis.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsJustification.Start">
            <summary>
            Items are aligned with the start of the row or column, with extra space at the end.
            Spacing between items does not change.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsJustification.Center">
            <summary>
            Items are aligned in the center of the row or column, with extra space at the start and
            end. Spacing between items does not change.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsJustification.End">
            <summary>
            Items are aligned with the end of the row or column, with extra space at the start.
            Spacing between items does not change.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceAround">
            <summary>
            Items are aligned so that extra space is added evenly before and after each item.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceBetween">
            <summary>
            Items are aligned so that extra space is added evenly between adjacent items. No space
            is added at the start or end.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.UniformGridLayoutItemsStretch">
            <summary>
            Defines constants that specify how items are sized to fill the available space.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsStretch.None">
            <summary>
            The item retains its natural size. Use of extra space is determined by the
            <see cref="P:Avalonia.Layout.UniformGridLayout.ItemsJustification"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsStretch.Fill">
            <summary>
            The item is sized to fill the available space in the non-scrolling direction. Item size
            in the scrolling direction is not changed.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayoutItemsStretch.Uniform">
            <summary>
            The item is sized to both fill the available space in the non-scrolling direction and
            maintain its aspect ratio.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.UniformGridLayout">
            <summary>
            Positions elements sequentially from left to right or top to bottom in a wrapping layout.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.ItemsJustification"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.ItemsStretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.ItemsStretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.MinColumnSpacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.MinItemHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.MinItemHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.MinItemWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.MinItemWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.MinRowSpacing"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumns"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.UniformGridLayout.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Layout.UniformGridLayout.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.UniformGridLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Layout.UniformGridLayout"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.ItemsJustification">
            <summary>
            Gets or sets a value that indicates how items are aligned on the non-scrolling or non-
            virtualizing axis.
            </summary>
            <value>
            An enumeration value that indicates how items are aligned. The default is Start.
            </value>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.ItemsStretch">
            <summary>
            Gets or sets a value that indicates how items are sized to fill the available space.
            </summary>
            <value>
            An enumeration value that indicates how items are sized to fill the available space.
            The default is None.
            </value>
            <remarks>
            This property enables adaptive layout behavior where the items are sized to fill the
            available space along the non-scrolling axis, and optionally maintain their aspect ratio.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.MinColumnSpacing">
            <summary>
            Gets or sets the minimum space between items on the horizontal axis.
            </summary>
            <remarks>
            The spacing may exceed this minimum value when <see cref="P:Avalonia.Layout.UniformGridLayout.ItemsJustification"/> is set
            to SpaceEvenly, SpaceAround, or SpaceBetween.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.MinItemHeight">
            <summary>
            Gets or sets the minimum height of each item.
            </summary>
            <value>
            The minimum height (in pixels) of each item. The default is NaN, in which case the
            height of the first item is used as the minimum.
            </value>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.MinItemWidth">
            <summary>
            Gets or sets the minimum width of each item.
            </summary>
            <value>
            The minimum width (in pixels) of each item. The default is NaN, in which case the width
            of the first item is used as the minimum.
            </value>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.MinRowSpacing">
            <summary>
            Gets or sets the minimum space between items on the vertical axis.
            </summary>
            <remarks>
            The spacing may exceed this minimum value when <see cref="P:Avalonia.Layout.UniformGridLayout.ItemsJustification"/> is set
            to SpaceEvenly, SpaceAround, or SpaceBetween.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumns">
            <summary>
            Gets or sets the maximum row or column count.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.UniformGridLayout.Orientation">
            <summary>
            Gets or sets the axis along which items are laid out.
            </summary>
            <value>
            One of the enumeration values that specifies the axis along which items are laid out.
            The default is Vertical.
            </value>
        </member>
        <member name="T:Avalonia.Layout.UniformGridLayoutState">
            <summary>
            Represents the state of a <see cref="T:Avalonia.Layout.UniformGridLayout"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.VirtualizingLayout">
            <summary>
            Represents the base class for an object that sizes and arranges child elements for a host
            and supports virtualization.
            </summary>
            <remarks>
            <see cref="T:Avalonia.Layout.VirtualizingLayout"/> is the base class for layouts that support virtualization.
            You can use one of the provided derived class, or inherit from it to create your own layout.
            Provided concrete virtualizing layout classes are <see cref="T:Avalonia.Layout.StackLayout"/> and 
            <see cref="T:Avalonia.Layout.UniformGridLayout"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.OnItemsChanged(Avalonia.Layout.VirtualizingLayoutContext,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the layout when the data collection assigned to the container element (Items)
            has changed.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="source">The data source.</param>
            <param name="args">Data about the collection change.</param>
            <remarks>
            Override <see cref="M:Avalonia.Layout.VirtualizingLayout.OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>
            to provide the behavior for this method in a derived class.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext)">
            <summary>
            When overridden in a derived class, initializes any per-container state the layout
            requires when it is attached to an ILayoutable container.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext)">
            <summary>
            When overridden in a derived class, removes any state the layout previously stored on
            the ILayoutable container.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext,Avalonia.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of the layout cycle. Classes can override
            this method to define their own "Measure" pass behavior.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="availableSize">
            The available size that this object can give to child objects. Infinity can be
            specified as a value to indicate that the object will size to whatever content is
            available.
            </param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations
            of the allocated sizes for child objects or based on other considerations such as a
            fixed container size.
            </returns>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext,Avalonia.Size)">
            <summary>
            When implemented in a derived class, provides the behavior for the "Arrange" pass of
            layout. Classes can override this method to define their own "Arrange" pass behavior.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="finalSize">
            The final area within the container that this object should use to arrange itself and
            its children.
            </param>
            <returns>The actual size that is used after the element is arranged in layout.</returns>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayout.OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the layout when the data collection assigned to the container element (Items)
            has changed.
            </summary>
            <param name="context">
            The context object that facilitates communication between the layout and its host
            container.
            </param>
            <param name="source">The data source.</param>
            <param name="args">Data about the collection change.</param>
        </member>
        <member name="T:Avalonia.Layout.ElementRealizationOptions">
            <summary>
            Defines constants that specify whether to suppress automatic recycling of the retrieved
            element or force creation of a new element.
            </summary>
            <remarks>
            When you call <see cref="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAt(System.Int32,Avalonia.Layout.ElementRealizationOptions)"/>,
            you can specify whether to suppress automatic recycling of the retrieved element or force
            creation of a new element. Elements retrieved with automatic recycling suppressed
            (SuppressAutoRecycle) are ignored by the automatic recycling logic that clears realized
            elements that were not retrieved as part of the current layout pass. You must explicitly
            recycle these elements by passing them to the RecycleElement method to avoid memory leaks.
            </remarks>
        </member>
        <member name="F:Avalonia.Layout.ElementRealizationOptions.None">
            <summary>
            No option is specified.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.ElementRealizationOptions.ForceCreate">
            <summary>
            Creation of a new element is forced.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.ElementRealizationOptions.SuppressAutoRecycle">
            <summary>
            The element is ignored by the automatic recycling logic.
            </summary>
        </member>
        <member name="T:Avalonia.Layout.VirtualizingLayoutContext">
            <summary>
            Represents the base class for layout context types that support virtualization.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.ItemCount">
            <summary>
            Gets the number of items in the data.
            </summary>
            <remarks>
            This property gets the value returned by ItemCountCore, which must be implemented in
            a derived class.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.LayoutOrigin">
            <summary>
            Gets or sets the origin point for the estimated content size.
            </summary>
            <remarks>
            LayoutOrigin is used by virtualizing layouts that rely on estimations when determining
            the size and position of content. It allows the layout to fix-up the estimated origin
            of the content as it changes due to on-going estimation or potentially identifying the
            actual size to use. For example, it’s possible that as a user is scrolling back to the
            top of the content that the layout's estimates for the content size that it reports as
            part of its MeasureOverride become increasingly accurate. If the predicted position of
            the content does not already match the previously predicted position (for example, if
            the size of the elements ends up being smaller than previously thought), then the
            layout can indicate a new origin. The viewport provided to the layout on subsequent
            passes will take into account the adjusted origin.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.RealizationRect">
            <summary>
            Gets an area that represents the viewport and buffer that the layout should fill with
            realized elements.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.RecommendedAnchorIndex">
            <summary>
            Gets the recommended index from which to start the generation and layout of elements.
            </summary>
            <remarks>
            The recommended index might be the result of programmatically realizing an element and
            requesting that it be brought into view. Or, it may be that a user drags the scrollbar
            thumb so quickly that the new viewport and the viewport and buffer previously given to
            the layout do not intersect, so a new index is suggested as the anchor from which to
            generate and layout other elements.
            </remarks>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.LayoutOriginCore">
            <summary>
            Implements the behavior of LayoutOrigin in a derived or custom VirtualizingLayoutContext.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.VirtualizingLayoutContext.RecommendedAnchorIndexCore">
            <summary>
            Implements the behavior for getting the return value of RecommendedAnchorIndex in a
            derived or custom <see cref="T:Avalonia.Layout.VirtualizingLayoutContext"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.GetItemAt(System.Int32)">
            <summary>
            Retrieves the data item in the source found at the specified index.
            </summary>
            <param name="index">The index of the data item to retrieve.</param>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAt(System.Int32)">
            <summary>
            Retrieves a UIElement that represents the data item in the source found at the
            specified index. By default, if an element already exists, it is returned; otherwise,
            a new element is created.
            </summary>
            <param name="index">The index of the data item to retrieve a UIElement for.</param>
            <remarks>
            This method calls <see cref="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAtCore(System.Int32,Avalonia.Layout.ElementRealizationOptions)"/>
            with options set to None. GetElementAtCore must be implemented in a derived class.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAt(System.Int32,Avalonia.Layout.ElementRealizationOptions)">
            <summary>
            Retrieves a UIElement that represents the data item in the source found at the
            specified index using the specified options.
            </summary>
            <param name="index">The index of the data item to retrieve a UIElement for.</param>
            <param name="options">
            A value of <see cref="T:Avalonia.Layout.ElementRealizationOptions"/> that specifies whether to suppress
            automatic recycling of the retrieved element or force creation of a new element.
            </param>
            <remarks>
            This method calls <see cref="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAtCore(System.Int32,Avalonia.Layout.ElementRealizationOptions)"/>,
            which must be implemented in a derived class. When you request an element for the
            specified index, you can optionally specify whether to suppress automatic recycling of
            the retrieved element or force creation of a new element.Elements retrieved with
            automatic recycling suppressed(SuppressAutoRecycle) are ignored by the automatic
            recycling logic that clears realized elements that were not retrieved as part of the
            current layout pass.You must explicitly recycle these elements by passing them to the
            RecycleElement method to avoid memory leaks. These options are intended for more
            advanced layouts that choose to explicitly manage the realization and recycling of
            elements as a performance optimization.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.RecycleElement(Avalonia.Layout.Layoutable)">
            <summary>
            Clears the specified UIElement and allows it to be either re-used or released.
            </summary>
            <param name="element">The element to clear.</param>
            <remarks>
            This method calls <see cref="M:Avalonia.Layout.VirtualizingLayoutContext.RecycleElementCore(Avalonia.Layout.Layoutable)"/>, which must be implemented
            in a derived class.
            </remarks>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.ItemCountCore">
            <summary>
            When implemented in a derived class, retrieves the number of items in the data.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.GetItemAtCore(System.Int32)">
            <summary>
            When implemented in a derived class, retrieves the data item in the source found at the
            specified index.
            </summary>
            <param name="index">The index of the data item to retrieve.</param>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.RealizationRectCore">
            <summary>
            When implemented in a derived class, retrieves an area that represents the viewport and
            buffer that the layout should fill with realized elements.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.GetOrCreateElementAtCore(System.Int32,Avalonia.Layout.ElementRealizationOptions)">
            <summary>
            When implemented in a derived class, retrieves a UIElement that represents the data item
            in the source found at the specified index using the specified options.
            </summary>
            <param name="index">The index of the data item to retrieve a UIElement for.</param>
            <param name="options">
            A value of <see cref="T:Avalonia.Layout.ElementRealizationOptions"/> that specifies whether to suppress
            automatic recycling of the retrieved element or force creation of a new element.
            </param>
        </member>
        <member name="M:Avalonia.Layout.VirtualizingLayoutContext.RecycleElementCore(Avalonia.Layout.Layoutable)">
            <summary>
            When implemented in a derived class, clears the specified UIElement and allows it to be
            either re-used or released.
            </summary>
            <param name="element">The element to clear.</param>
        </member>
        <member name="T:Avalonia.Layout.WrapLayout">
            <summary>
            Arranges elements by wrapping them to fit the available space.
            When <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Orientation.Horizontal, element are arranged in rows until the available width is reached and then to a new row.
            When <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Orientation.Vertical, element are arranged in columns until the available height is reached.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.WrapLayout.HorizontalSpacing">
            <summary>
            Gets or sets a uniform Horizontal distance (in pixels) between items when <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Horizontal,
            or between columns of items when <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Vertical.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.WrapLayout.HorizontalSpacingProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Layout.WrapLayout.HorizontalSpacing"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.WrapLayout.VerticalSpacing">
            <summary>
            Gets or sets a uniform Vertical distance (in pixels) between items when <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Vertical,
            or between rows of items when <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> is set to Horizontal.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.WrapLayout.VerticalSpacingProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Layout.WrapLayout.VerticalSpacing"/> dependency property.
            </summary>
        </member>
        <member name="P:Avalonia.Layout.WrapLayout.Orientation">
            <summary>
            Gets or sets the orientation of the WrapLayout.
            Horizontal means that child controls will be added horizontally until the width of the panel is reached, then a new row is added to add new child controls.
            Vertical means that children will be added vertically until the height of the panel is reached, then a new column is added.
            </summary>
        </member>
        <member name="F:Avalonia.Layout.WrapLayout.OrientationProperty">
            <summary>
            Identifies the <see cref="P:Avalonia.Layout.WrapLayout.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="M:Avalonia.Layout.WrapLayout.InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Layout.WrapLayout.UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Layout.WrapLayout.OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Layout.WrapLayout.MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext,Avalonia.Size)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Layout.WrapLayout.ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext,Avalonia.Size)">
            <inheritdoc />
        </member>
    </members>
</doc>
